{"version":3,"sources":["images/restaurant-position-marker.png","images/bestRestLogo.png","images/user-position-marker.png","images/logo.png","components/AddReviews.js","components/RestaurantBox.js","components/RestaurantsList.js","components/ExtraRestaurants.js","components/RestaurantsMap.js","utils/MAPBOX_TOKEN.js","components/Restaurants.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddReviews","useState","stars","setStars","review","setReview","fullReview","setFullReview","Fragment","className","map","id","text","star","key","rating","Number","total","interactive","onChange","event","target","value","type","placeholder","onClick","alert","concat","Math","random","RestaurantBox","props","restaurantBoxPlaces","places","place","venue","name","location","address","RestaurantsList","role","aria-label","userNewPlaces","ExtraRestaurants","restaurantPlaces","selectedRestaurant","setSelectedRestaurant","latitude","lat","longitude","lng","e","preventDefault","src","restaurant_marker","alt","onClose","bestRestLogo","RestaurantsMap","userLat","setUserLat","userLong","setUserLong","selectedLocation","setSelectedLocation","width","height","zoom","viewport","setViewPort","useEffect","navigator","geolocation","getCurrentPosition","position","coords","mapboxApiAccessToken","mapStyle","onViewportChange","transitionDuration","onDblClick","_handleClick","user_position_marker","Restaurants","setUserNewPlaces","lngLat","prompt","img","Header","logo","App","setPlaces","params","client_id","process","client_secret","v","ll","limit","query","axios","get","URLSearchParams","then","res","data","response","groups","items","catch","err","console","log","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2f0be275.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/restaurant-position-marker.4c717ae9.png\";","module.exports = __webpack_public_path__ + \"static/media/bestRestLogo.c71227c1.png\";","module.exports = __webpack_public_path__ + \"static/media/user-position-marker.972bdb89.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.e6c189c5.png\";","import React, { useState } from \"react\";\nimport Rater from \"react-rater\";\nimport \"react-rater/lib/react-rater.css\";\nimport \"./AddReviews.css\";\n\nfunction AddReviews() {\n  const [stars, setStars] = useState(0);\n  const [review, setReview] = useState(\"\");\n  const [fullReview, setFullReview] = useState([]);\n\n  function getStars(event) {\n    setStars(Number(event.target.value));\n  }\n\n  function getReview(event) {\n    setReview(event.target.value);\n  }\n\n  function addReview() {\n    if (stars === 0 || review === \"\") {\n      alert(\"You should submit a real feedback review\");\n    } else {\n      setFullReview((fullReview) =>\n        fullReview.concat({\n          text: review,\n          star: stars,\n          id: Math.random() * 100,\n        })\n      );\n      setReview(\"\");\n      setStars(0);\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"review\">\n        {fullReview.map(({ id, text, star }) => (\n          <ul key={id}>\n            <li>\n              <Rater rating={Number(star)} total={5} interactive={false} />\n            </li>\n            <li>\n              <span>Feedback: {text}</span>\n            </li>\n          </ul>\n        ))}\n\n        <select onChange={getStars} className=\"select-stars\" value={stars}>\n          <option value=\"0\">✰✰✰✰✰</option>\n          <option value=\"1\">⭐✰✰✰✰</option>\n          <option value=\"2\">⭐⭐✰✰✰</option>\n          <option value=\"3\">⭐⭐⭐✰✰</option>\n          <option value=\"4\">⭐⭐⭐⭐✰</option>\n          <option value=\"5\">⭐⭐⭐⭐⭐</option>\n        </select>\n        <input\n          type=\"text\"\n          onChange={getReview}\n          className=\"input-text\"\n          placeholder=\"leave a review\"\n          value={review}\n        />\n        <button onClick={addReview} className=\"submit-review\">\n          {\" \"}\n          Submit a review\n        </button>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default AddReviews;\n","import React from \"react\";\nimport \"./RestaurantBox.css\";\nimport AddReviews from \"./AddReviews\";\n//import RestaurantImage from \"./RestaurantImage\";\n//import restaurantLogo from \"../images/restaurants-logo.jpg\";\n\nfunction RestaurantBox(props) {\n  const boxPlaces = props.places;\n  //console.log(\"boxPlaces \" + boxPlaces);\n  const restaurantBoxPlaces = boxPlaces.map((place) => {\n    //let imageURL = `${place.venue.categories[0].icon.prefix}${place.venue.categories[0].icon.suffix}`\n    return (\n      <div key={place.venue.id} className=\"section\">\n        <h3 className=\"restaurant-title\">{place.venue.name}</h3>\n        <h4>Address: {place.venue.location.address}</h4>\n        {/*\n        <div className=\"rest-box\">\n          <img\n            className=\"box-image\"\n            src={restaurantLogo}\n            alt=\"restaurant-pic\"\n          />\n        </div>\n        */}\n        <div className=\"add-reviews\">\n          <AddReviews />\n        </div>\n      </div>\n    );\n  });\n\n  return (\n    <React.Fragment>\n      <div className=\"sublist\">\n        <div>{restaurantBoxPlaces}</div>\n      </div>\n    </React.Fragment>\n  );\n}\nexport default RestaurantBox;\n\n/*\n  const userNewFilteredPlaces = props.userNewPlaces\n    .filter(\n      (restaurant) =>\n        (restaurant.review >= props.fromStars) &\n        (restaurant.review <= props.toStars)\n    )\n    .map((filteredRestaurant) => (\n      <div key={filteredRestaurant.id} className=\"section\">\n        <h3 className=\"restaurant-title\">{filteredRestaurant.name}</h3>\n        <div className=\"box-image\">\n          <img src={filteredRestaurant.img} alt=\"restaurant-pic\" />\n        </div>\n        <div className=\"rate-section\">\n          <ul>\n            <li>\n              {\" \"}\n              <Rater\n                rating={filteredRestaurant.review}\n                total={5}\n                interactive={false}\n              />{\" \"}\n            </li>\n          </ul>\n        </div>\n\n        <div className=\"add-reviews\">\n          <AddReviews />\n        </div>\n      </div>\n    ));\n    */\n\n/*\n  const boxGplaces = props.gplaces;\n  const restaurantBoxGplaces = boxGplaces.map(restaurant => {\n    return (\n      <div key={restaurant.id} className=\"section\">\n        <h3 className=\"restaurant-title\">{restaurant.venue.name}</h3>\n        <div className=\"rest-box\">\n          <div className=\"box-image\">\n            <RestaurantImage imageRef={restaurant.photos[0].photo_reference} />\n          </div>\n          <div className=\"rate-section\">\n            <ul>\n              <li>\n                {\" \"}\n                <Rater\n                  rating={restaurant.rating}\n                  total={5}\n                  interactive={false}\n                />{\" \"}\n              </li>\n              <li>User Reatings Total: {restaurant.user_ratings_total}</li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"add-reviews\">\n          <AddReviews />\n        </div>\n      </div>\n    );\n  });\n */\n\n/*\n\n  const filteredRestaurants = boxPlaces\n    .filter(\n      (restaurant) =>\n        (restaurant.rating >= props.fromStars) &\n        (restaurant.rating <= props.toStars)\n    )\n    .map((filteredGrestaurant) => (\n      <div key={filteredGrestaurant.id} className=\"section\">\n        <h3 className=\"restaurant-title\">{filteredGrestaurant.name}</h3>\n        <div className=\"box-image\">\n          <RestaurantImage\n            imageRef={filteredGrestaurant.photos[0].photo_reference}\n          />\n        </div>\n        <div className=\"rate-section\">\n          <ul>\n            <li>\n              {\" \"}\n              <Rater\n                rating={filteredGrestaurant.rating}\n                total={5}\n                interactive={false}\n              />{\" \"}\n            </li>\n            <li>\n              User Ratings Total: {filteredGrestaurant.user_ratings_total}\n            </li>\n          </ul>\n        </div>\n\n        <div className=\"add-reviews\">\n          <AddReviews />\n        </div>\n      </div>\n    ));\n */\n\n/*\n  const userNewPlaces = props.userNewPlaces.map((restaurant) => {\n    return (\n      <div key={restaurant.id} className=\"section\">\n        <h3 className=\"restaurant-title\">{restaurant.name}</h3>\n        <div className=\"box-image\">\n          <img src={restaurant.img} alt=\"restaurant-pic\" />\n        </div>\n        <div className=\"rate-section\">\n          <ul>\n            <li>\n              {\" \"}\n              <Rater\n                rating={restaurant.review}\n                total={5}\n                interactive={false}\n              />{\" \"}\n            </li>\n          </ul>\n        </div>\n\n        <div className=\"add-reviews\">\n          <AddReviews />\n        </div>\n      </div>\n    );\n  });\n \n \n */\n","import React from \"react\";\nimport \"./RestaurantsList.css\";\nimport RestaurantBox from \"./RestaurantBox\";\n\nfunction RestaurantsList(props) {\n  return (\n    <div className=\"list\">\n      <h2 className=\"list-title\">\n        <span role=\"img\" aria-label=\"food emoji\">\n          🥞🍛\n        </span>{\" \"}\n        Restaurant Lists{\" \"}\n        <span role=\"img\" aria-label=\"food emoji\">\n          🍝🍲\n        </span>\n      </h2>\n      <RestaurantBox\n        places={props.places}\n        userNewPlaces={props.userNewPlaces}\n      />\n    </div>\n  );\n}\n\nexport default RestaurantsList;\n","import React, { useState } from \"react\";\nimport { Marker, Popup } from \"react-map-gl\";\nimport \"./ExtraRestaurants.css\";\nimport restaurant_marker from \"../images/restaurant-position-marker.png\";\nimport bestRestLogo from \"../images/bestRestLogo.png\";\n\nfunction ExtraRestaurants(props) {\n  const restaurantPlaces = props.places;\n  const [selectedRestaurant, setSelectedRestaurant] = useState(null);\n\n  return (\n    <div>\n      {restaurantPlaces.map((place) => (\n        <Marker\n          key={place.venue.id}\n          latitude={place.venue.location.lat}\n          longitude={place.venue.location.lng}\n        >\n          <button\n            className=\"marker\"\n            onClick={(e) => {\n              e.preventDefault();\n              setSelectedRestaurant(place);\n            }}\n          >\n            <img src={restaurant_marker} alt=\"restaurant marker\" />\n          </button>\n        </Marker>\n      ))}\n      {selectedRestaurant ? (\n        <Popup\n          latitude={selectedRestaurant.venue.location.lat}\n          longitude={selectedRestaurant.venue.location.lng}\n          onClose={() => {\n            setSelectedRestaurant(null);\n          }}\n        >\n          <div>\n            <h3 className=\"restaurant-title\">\n              {selectedRestaurant.venue.name}\n            </h3>\n            <p>Address: {selectedRestaurant.venue.location.address}</p>\n            <img\n              className=\"restaurantLogo\"\n              src={bestRestLogo}\n              alt=\"restaurnt logo\"\n            />\n          </div>\n        </Popup>\n      ) : null}\n    </div>\n  );\n}\n\nexport default ExtraRestaurants;\n","import React, { useEffect, useState } from \"react\";\nimport MapGL, { Marker, NavigationControl, Popup } from \"react-map-gl\";\nimport { MAPBOX_TOKEN } from \"../utils/MAPBOX_TOKEN\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"./RestaurantsMap.css\";\nimport ExtraRestaurants from \"./ExtraRestaurants\";\nimport user_position_marker from \"../images/user-position-marker.png\";\n\nconst TOKEN = MAPBOX_TOKEN;\n\nfunction RestaurantsMap(props) {\n  const [userLat, setUserLat] = useState(30.7970511);\n  const [userLong, setUserLong] = useState(30.9987288);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [viewport, setViewPort] = useState({\n    width: \"100%\",\n    height: 880,\n    latitude: userLat,\n    longitude: userLong,\n    zoom: 10,\n  });\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        setUserLat(position.coords.latitude);\n        setUserLong(position.coords.longitude);\n        setViewPort({\n          width: \"100%\",\n          height: 880,\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          zoom: 13,\n        });\n      });\n    }\n  }, []);\n\n  const _onViewportChange = (viewport) => {\n    setViewPort({\n      ...viewport,\n      transitionDuration: 3000,\n    });\n  };\n\n  //console.log(\"restMap\" + userLong + userLat);\n  return (\n    <div className=\"map\">\n      <MapGL\n        {...viewport}\n        mapboxApiAccessToken={TOKEN}\n        mapStyle=\"mapbox://styles/mapbox/light-v9\"\n        onViewportChange={_onViewportChange}\n        onDblClick={props._handleClick}\n      >\n        <Marker latitude={userLat} longitude={userLong}>\n          <button\n            className=\"marker\"\n            onClick={(e) => {\n              e.preventDefault();\n              setSelectedLocation(\"Your current location!\");\n            }}\n          >\n            <img src={user_position_marker} alt=\"user-position-marker\" />\n          </button>\n        </Marker>\n\n        <div className=\"navigation-control\">\n          <NavigationControl />\n        </div>\n\n        {selectedLocation ? (\n          <Popup\n            latitude={userLat}\n            longitude={userLong}\n            onClose={() => {\n              setSelectedLocation(null);\n            }}\n          >\n            <div>\n              <h3 className=\"restaurant-title\">{selectedLocation}</h3>\n            </div>\n          </Popup>\n        ) : null}\n\n        <ExtraRestaurants places={props.places} />\n      </MapGL>\n    </div>\n  );\n}\n\nexport default RestaurantsMap;\n","export const MAPBOX_TOKEN =  'pk.eyJ1IjoibW9oYW1lZHNnYXAiLCJhIjoiY2p2NWNpc2liMHJ1MzN5cDJ3dmFsbTI1aSJ9.s59PBCspitI9M_EHQ0hgeg'\n","import React, { useState } from \"react\";\nimport RestaurantsList from \"./RestaurantsList\";\nimport RestaurantsMap from \"./RestaurantsMap\";\nimport \"./FilterRestaurants.css\";\n\nconst Restaurants = (props) => {\n  const [userNewPlaces, setUserNewPlaces] = useState([]);\n\n  const handleClick = (e) => {\n    setUserNewPlaces((userNewPlaces) =>\n      userNewPlaces.concat({\n        location: e.lngLat,\n        name: prompt(\"Enter the new restaurant name!\"),\n        review: prompt(\"give a review number form 1 to 5 \"),\n        img: prompt(\"Enter restaurant image URL!\"),\n        id: Math.random() * 100,\n      })\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"main-view\">\n        <div className=\"restaurants-map\">\n          <RestaurantsMap\n            places={props.places}\n            userNewPlaces={userNewPlaces}\n            _handleClick={handleClick}\n          />\n        </div>\n        <div className=\"restaurants-list\">\n          <RestaurantsList\n            places={props.places}\n            userNewPlaces={userNewPlaces}\n          />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Restaurants;\n","import React from \"react\";\nimport logo from \"../images/logo.png\";\nimport \"./Header.css\";\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <header>\n        <img\n          alt=\"app-logo\"\n          src={logo}\n          width=\"70\"\n          height=\"70\"\n          className=\"app-logo\"\n        />\n        <h1 id=\"header-title\">Restaurant Reviews</h1>\n      </header>\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport Restaurants from \"./components/Restaurants\";\nimport Header from \"./components/Header\";\nimport axios from \"axios\";\n\nimport \"./App.css\";\n\nconst CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\nconst CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET;\n\nfunction App() {\n  const [places, setPlaces] = useState([]);\n\n  // Automatically detect user geolocation\n  //  Forursquare API call for Places in user's area!\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        const END_POINT = \"https://api.foursquare.com/v2/venues/explore?\";\n        const params = {\n          client_id: CLIENT_ID,\n          client_secret: CLIENT_SECRET,\n          v: \"20200908\",\n          ll: `${position.coords.latitude}, ${position.coords.longitude}`,\n          limit: 50,\n          query: \"restaurant\",\n        };\n        axios\n          .get(END_POINT + new URLSearchParams(params))\n          .then((res) => {\n            setPlaces(res.data.response.groups[0].items);\n          })\n          .catch((err) => {\n            console.log(\"ERROR HAS OCURED\" + err);\n          });\n      });\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  //console.log(places);\n  return (\n    <div className=\"App\">\n      <Header />\n      <div>\n        <Restaurants places={places} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}